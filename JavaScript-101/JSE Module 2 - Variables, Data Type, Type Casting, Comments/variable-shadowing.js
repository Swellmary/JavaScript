//Variable shadowing in JavaScript happens when a local variable (declared inside a function or block) has the same name as a variable in an outer scope ‚Äî effectively "shadowing" or hiding the outer one within that inner block or function.


let name = "Global";

function greet() {
  let name = "Local"; // Shadows the global 'name'
  console.log(name);  // Output: "Local"
}

greet();
console.log(name);    // Output: "Global"


//‚ö†Ô∏è Variable shadowing is not always bad ‚Äî but it can lead to bugs or confusion if not used carefully.
//Shadowing is only useful when you're aware of it and intend to keep the scopes separate. If it makes code harder to read or introduces confusion, it‚Äôs better to use a new variable name.

/*üß† Best Practices
‚úÖ Avoid shadowing unless there's a clear, local reason.

‚úÖ Prefer meaningful variable names, especially for outer-scope variables.

‚úÖ Use linters (like ESLint) to catch unintentional shadowing.

‚úÖ Stick with let and const over var ‚Äî they make shadowing easier to reason about.
*/